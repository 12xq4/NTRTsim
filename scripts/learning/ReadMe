
When creating a member from component populations,
the components are chosen randomly.

How should different scores be stored?
By extension, the current recording method for different terrains should change.

In algorithms, a member of the previous generation is selected for mutation.
This is the same approach as with the previous architecture (Elitism).
However, this new member is directly copied and used as a template for mutations.
Thus, if there was information specific to the previous member, it MUST be overwritten
during the creation/mutation of the new member.

In the current implementation, multiple scores for a single trial have equal weight in a component.
If the same component is used in different learning scenarios, then it may be of value to have "subscores"
for when different terrains / fitness functions are used.
Otherwise, single-run scores get watered down.

EmptyComponent is sticking around to give a template to MonteCarlo when there is no seed.

TODO:
Exception Hierarchy
Refactor out component name from generatecomponent(s)population